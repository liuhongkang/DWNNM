
clear;
clc;
Original_image_dir  =    'clean_images/';
Denoising_image_dir='denoising_images/';
im_num = 20;

nSig = 5;  %single channel

Par.nSig      =   nSig;                                 %  噪声强度，三个通道添加的噪声强度不同，本算法为单通道
Par.win =   20;                                   %   非局部图像块搜索窗口尺寸
Par.Constant         =  2 * sqrt(2);                              % 权重矩阵的固定常数项
Par.Innerloop =   2;                                    % 内部循环次数，重新进行图像块匹配
Par.ps       =   6;                            % 图像块尺寸
Par.step        =   5;                         % 滑动步长
Par.Iter          =   6;                            %  总的迭代次数，重复去噪
Par.display = true;


Par.method = ' DWNNM_ADMM';
Par.maxIter = 10;  %ADMM 分解迭代次数


Par.delta     =   0.1;                                  % Parameter between each iter
%未搞懂，迭代过程中添加低噪声
Par.lambda = 0.75;         %权重参数，应根据不同噪声等级进行调整
Par.mu = 1.001;       %ADMM更新参数 mu
Par.rho = 0.05;       % ADMM惩罚系数
% record all the results in each iteration
Par.PSNR = zeros(Par.Iter, im_num, 'single');
Par.SSIM = zeros(Par.Iter, im_num, 'single');
for i = 1:im_num
    Par.imgidx = i;   %图像索引
    Par.nSig0 = nSig;   %噪声等级
    Par.nlsp        =   70;   % 初始化非局部图像块数量
    imgName=[num2str(i,'%02d'),'clean.png'];
    imgPath=[Original_image_dir,imgName];
    Par.I =  double( imread(imgPath));
    [h, w, ch] = size(Par.I);
    Par.nim = zeros(size(Par.I));    %噪声图像
    Par.weight=zeros(size(Par.I));   %权重矩阵
    
    randn('seed',0);
    Par.nim(:, :) = Par.I(:, :) + Par.nSig0 * randn(size(Par.I(:, :))); %添加噪声
    Par.weight(:,:)=local_structure_weight(Par.nim(:, :),'Gaussian',Par.nSig0);
    
    fprintf('%s denoising process start:\n',imgName);
    PSNR =   csnr( Par.nim, Par.I, 0, 0 );
    SSIM      =  cal_ssim( Par.nim, Par.I, 0, 0 );%calculate PSNR and SSIM
    fprintf('The initial value of PSNR = %2.4f, SSIM = %2.4f \n', PSNR,SSIM);
    %
    time0 = clock;
    [im_out, Par] = DWNNM_Denoising( Par.nim, Par.I,Par.weight, Par );%DWNNM model
    fprintf('Total elapsed time = %f s\n', (etime(clock,time0)) );   %time cost
    %correct the result
    im_out(im_out>255)=255;
    im_out(im_out<0)=0;
    
    % calculate the PSNR  SSIM
    Par.PSNR(Par.Iter, Par.imgidx)  =   csnr( im_out, Par.I, 0, 0 );
    Par.SSIM(Par.Iter, Par.imgidx)      =  cal_ssim( im_out, Par.I, 0, 0 );
    imname = sprintf([Par.method '_nSig' num2str(nSig(1))  '_Oite' num2str(Par.Iter) '_Iite' num2str(Par.maxIter) '_rho' num2str(Par.rho) '_mu' num2str(Par.mu) '_lambda' num2str(Par.lambda) '_' imgName]);
    imwrite(im_out/255, [Denoising_image_dir,imname]);
    fprintf('%s : PSNR = %2.4f, SSIM = %2.4f \n',im_dir(i).name, Par.PSNR(Par.Iter, Par.imgidx),Par.SSIM(Par.Iter, Par.imgidx)     );
end
mPSNR=mean(Par.PSNR,2);    %mean value of rows
[~, idx] = max(mPSNR);     %the index of max mean value
PSNR =Par.PSNR(idx,:);
SSIM = Par.SSIM(idx,:);  %SSIM value of max index
mSSIM=mean(SSIM,2);
fprintf('The best PSNR result is at %d iteration. \n',idx);
fprintf('The average PSNR = %2.4f, SSIM = %2.4f. \n', mPSNR(idx),mSSIM);
name = sprintf([Par.method '_nSig' num2str(nSig(1)) '_Oite' num2str(Par.Iter) '_Iite' num2str(Par.maxIter) '_rho' num2str(Par.rho) '_mu' num2str(Par.mu) '_lambda' num2str(Par.lambda) '.mat']);
save(name,'nSig','PSNR','SSIM','mPSNR','mSSIM');